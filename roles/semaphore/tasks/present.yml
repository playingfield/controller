- name: Install packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  register: package_install
  until: package_install is success
  retries: 10
  delay: 2
  with_items: "{{ semaphore_dependencies }}"

- name: Relax SELinux
  ansible.posix.selinux:
    policy: targeted
    state: permissive

- name: Assert that ssh_passphrase.length > 8
  ansible.builtin.assert:
    that: ssh_passphrase | length > 8
    msg: "{{ ssh_passphrase }} needs to conform."

- name: Create semaphore user
  ansible.builtin.user:
    name: semaphore
    comment: SemaphoreUI
    uid: 1001
    generate_ssh_key: true
    ssh_key_type: ed25519
    ssh_key_passphrase: "{{ ssh_passphrase }}"
    system: true

- name: Enable SSH access
  ansible.builtin.copy:
    remote_src: true
    src: /home/semaphore/.ssh/id_ed25519.pub
    dest: /home/semaphore/.ssh/authorized_keys
    owner: semaphore
    group: semaphore
    mode: '0600'

- name: Find Semaphore release
  when: semaphore_download_url is not defined
  become: false
  block:

    - name: Get Semaphore Release info from Github
      ansible.builtin.uri:
        url: https://api.github.com/repos/semaphoreui/semaphore/releases/latest
        return_content: true
        body_format: json
      register: _sem_rel
      check_mode: false

    - name: Set Semaphore requirements
      ansible.builtin.set_fact:
        semaphore_version: "{{ _sem_rel['json']['tag_name'][1:] }}"
        semaphore_pkg_ext: "{{ (ansible_facts['os_family'] == 'RedHat') | ternary('rpm', 'deb') }}"
        semaphore_pkg_arch: "{{ (ansible_facts['architecture'] == 'x86_64') | ternary('amd64', 'arm64') }}"

    - name: Set semaphore_download_url
      ansible.builtin.set_fact:
        semaphore_download_url: "{{ semaphore_releases_url }}/{{ _sem_rel.json.name }}/semaphore_{{ semaphore_version }}_linux_{{ semaphore_pkg_arch }}.{{ semaphore_pkg_ext }}"

- name: Install Semaphore package
  when: semaphore_download_package | bool
  block:

    - name: Download semaphore
      become: false
      ansible.builtin.get_url:
        url: "{{ semaphore_download_url }}"
        dest: "/tmp/semaphore.{{ semaphore_pkg_ext }}"
        mode: '0644'
      register: downloaded_semaphore

    # This task will be skipped in check mode
    - name: Ensure Semaphore installed
      ansible.builtin.dnf:
        name: "file:///tmp/semaphore.{{ semaphore_pkg_ext }}"
        disable_gpg_check: true
        state: present
      when:
        - not ansible_check_mode
        - downloaded_semaphore is success
        - ansible_facts['os_family'] == 'RedHat'

    # This task will be skipped in check mode
    - name: Ensure Semaphore installed
      ansible.builtin.apt:
        deb: "file:///tmp/semaphore.{{ semaphore_pkg_ext }}"
        allow_unauthenticated: true
        state: present
      when:
        - not ansible_check_mode
        - downloaded_semaphore is success
        - ansible_facts['os_family'] == 'Debian'

  always:
    - name: Remove package from /tmp
      ansible.builtin.file:
        path: "/tmp/semaphore.{{ semaphore_pkg_ext }}"
        state: absent

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: semaphore
    group: semaphore
    mode: '0750'
  loop:
    - "{{ semaphore_config_dir }}"
    - /home/semaphore/tmp

- name: Copy requirements for ExecStartPre
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /home/semaphore/
    owner: semaphore
    group: semaphore
    mode: '0640'
  loop:
    - requirements.txt
    - requirements.yml
    - collections.yml
  notify: Restart semaphore

- name: Create python3.12 venv
  become_user: semaphore
  ansible.builtin.command: /usr/bin/python3.12 -m venv venv --upgrade-deps
  args:
    chdir: /home/semaphore
    creates: /home/semaphore/venv
  notify: Restart semaphore

- name: Deploy Semaphore Config
  become: true
  ansible.builtin.template:
    src: "{{ semaphore_config_path }}"
    dest: "{{ semaphore_config_dir }}/config.json"
    mode: '0660'
    owner: semaphore
    group: semaphore
  notify: Restart semaphore

- name: Create Semaphoreui SELinux policy
  when: piet is defined
  block:
    - name: Copy policy files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /tmp/
        mode: '0644'
      loop:
        - semaphoreui.pp
        - semaphoreui.te

    - name: Install SELinux policy
      ansible.builtin.command:
        chdir: /tmp
        cmd: semodule -i semaphoreui.pp
      changed_when: false
  always:
    - name: Remove files
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - semaphoreui.pp
        - semaphoreui.te


- name: Create semaphore service
  ansible.builtin.template:
    src: semaphore.service.j2
    dest: /usr/lib/systemd/system/semaphore.service
    owner: root
    group: semaphore
    mode: '0644'
  notify: Restart semaphore

- name: Enable semaphore service
  ansible.builtin.systemd:
    name: semaphore.service
    enabled: true
    daemon_reload: true
  notify: Restart semaphore

- name: Manage local admin account
  when: semaphore_admin_user_manage
  block:

    - name: Check if Semaphore local admin account exists
      ansible.builtin.command: >
        /usr/bin/semaphore user list
        --config /etc/semaphore/config.json
      changed_when: false  # Only lists existing users
      register: semaphore_users

    - name: Create Semaphore local admin account
      ansible.builtin.command: >
        /usr/bin/semaphore user add
        --config /etc/semaphore/config.json
        --login {{ semaphore_admin_user }}
        --name {{ semaphore_admin_user }}
        --password {{ semaphore_admin_password }}
        --email {{ semaphore_admin_email }}
        --admin
      changed_when: true  # This always changes, this CLI basically resets the password
      when: semaphore_admin_user not in semaphore_users['stdout']
      no_log: "{{ not debug }}"

    - name: Update Semaphore local admin account
      ansible.builtin.command: >
        /usr/bin/semaphore user change-by-login
        --config /etc/semaphore/config.json
        --login {{ semaphore_admin_user }}
        --password {{ semaphore_admin_password }}
        --email {{ semaphore_admin_email }}
        --admin
      changed_when: true  # This always changes, this CLI basically resets the password
      when: semaphore_admin_user in semaphore_users['stdout']
      no_log: "{{ not debug }}"

    - name: Deploy .env file
      ansible.builtin.template:
        src: env.j2
        dest: "{{ semaphore_env }}"
        owner: semaphore
        group: semaphore
        mode: '0600'
